def newton_raphson_method(f, df, x0, tolerance=1e-4, max_iterations=100):
    print(f"{'Iteration':^10} {'x':^15} {'f(x)':^15}")
    print("-" * 40)
    for i in range(1, max_iterations + 1):
        fx = f(x0)
        dfx = df(x0)
        if dfx == 0:
            print("Derivative is zero. No solution found.")
            return None
        print(f"{i:^10} {x0:^15.6f} {fx:^15.6f}")
        
        # Newton-Raphson formula
        x1 = x0 - fx / dfx
        
        # Check if the difference between two successive approximations is within tolerance
        if abs(x1 - x0) < tolerance:
            return x1
        
        x0 = x1

    print("Maximum iterations reached without convergence.")
    return x0

def f(x):
    return x**3 - x - 1

def df(x):
    return 3*x**2 - 1

# Initial guess and tolerance
x0 = 1.5
tolerance = 1e-7
max_iterations = 100

root = newton_raphson_method(f, df, x0, tolerance, max_iterations)
if root is not None:
    print(f"\nThe root is approximately: {root:.4f}")
